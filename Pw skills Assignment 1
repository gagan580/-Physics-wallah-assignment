{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMBpU2Yxi/LHk8RQpTZ4niU"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Q1- What is Python, and why is it popular\u001a\n","Answer- Python is a popular programming language because it is easy to use, it is versatile, libraries, speed and it's community."],"metadata":{"id":"_m8_yNgcl9Ur"}},{"cell_type":"markdown","source":["\n","\n","Q2- What is an interpreter in Python\u001a\n","Answer- A interpretor is a program in python that reads and executes python code line by line it translate the high level code into machine code so that computer can understand that."],"metadata":{"id":"9AlUwtqgnAA-"}},{"cell_type":"markdown","source":["Q3-What are predefined keywords in Python\u001a\n","Answer- predefined keywords are reserved with special meaning in python which are help to define the syntax of the language. This cannot be used as variable. Eg if, else, while etc. This are case sensitive."],"metadata":{"id":"vZ_9KSF2oy_L"}},{"cell_type":"markdown","source":["Q4- Can keywords be used as variable names\u001a\n","Answer- No, keywords cannot be used as variable names because keywords are predefined meaning if we use that it will through us an error."],"metadata":{"id":"c1UTG3ZiqkEt"}},{"cell_type":"markdown","source":[" Q5- What is mutability in Python\u001a\n","\n","Answer- mutability in python means the values can be changeable after defining or we can make change in syntax."],"metadata":{"id":"vSLfVRJLsC9q"}},{"cell_type":"markdown","source":["Q6- Why are lists mutable, but tuples are immutable\u001a\n","Answer- lists are mutable because if someone wants to add or do something else he/she can easily do with the help of lists but in tuple it is tottaly different because tupples are maded to store unique values or values which are not going to get changed."],"metadata":{"id":"bWANGQiVsw8B"}},{"cell_type":"markdown","source":["Q7-What is the difference between “==” and “is” operators in Python\u001a\n","Answer- This both are comparison operatots but \"==\" is used to check the values of two objects are equal or not. Where \"is\" is used to check wheather they belong to same memory location or not."],"metadata":{"id":"AccNRky1p_hT"}},{"cell_type":"markdown","source":["Q8- What are logical operators in Python\u001a\n","Answer- logical operators are keywords that evaluates multiple conditions in single expression. Logical operators contain \"and\", \" or\", \"not\" And this can be used in single expression also."],"metadata":{"id":"luF4KYpAsFWn"}},{"cell_type":"markdown","source":["Q9- What is type casting in Python\u001a\n","Answer- type casting in python means changing a variable data type from one to another.There are two types of casting in python.1.implicit type casting 2.explicit type casting.float(), int(), str(), list(), order() are some example of typecasting."],"metadata":{"id":"qFIbh5URv1h4"}},{"cell_type":"markdown","source":["\n","Q10-What is the difference between implicit and explicit type casting\u001a\n","Answer- implicit type casting interpreter automatically converts data types\n","Explicit type casting is when the user manually converts data types. Eg int(), string(), float() etc."],"metadata":{"id":"Xis2mzwO7uP9"}},{"cell_type":"markdown","source":["Q11 -What is the purpose of conditional statements in Python\u001a\n","Answer - The purpose is to control the flow of program by making decision based on certain conditions. Efficiency, readability eg of conditional formatting is \"if\" Statement, \"ifelse\" Statement, \"==\"to statement and many more."],"metadata":{"id":"SkZrqifn9sx2"}},{"cell_type":"markdown","source":["Q12- How does the elif statement work\u001a\n","\n","Answer- \"elif\" Stands for \"elseif\" is used in conditional statement to check for multiple conditions for eg if the first condition is false, it moves on to the next \"elif\" Statement to check if that condition is true."],"metadata":{"id":"GxAOvAOM-5Nf"}},{"cell_type":"markdown","source":["Q13- What is the difference between for and while loops\u001a\n","\n","Answer- the difference between for loop and while loop is that for loop is used when the number of iterations is known and while loop is used when the iterations is unknown."],"metadata":{"id":"2dATSNogAUqC"}},{"cell_type":"code","source":["#Q14 -Describe a scenario where a while loop is more suitable than a for loop\n","#Answer- while loop is preferable when the number of iterations is unknown we can see this with an eg we want to find secret number by guess\n","secret_number=13\n","guess= None\n","while guess !=secret_number:\n","     guess = int(input(\"guess the secret_number: \"))\n","     if guess < secret_number:\n","        print(\"too low\")\n","     elif guess > secret_number:\n","        print (\"too high\")\n","print(\"congratulations, you guess it right\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1Wthwql7Bzhd","executionInfo":{"status":"ok","timestamp":1735974074355,"user_tz":-330,"elapsed":19446,"user":{"displayName":"Gagan Deep","userId":"13599288974688093114"}},"outputId":"ea421c81-3c6f-44ba-9922-771020ec2f00"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["guess the secret_number: 6\n","too low\n","guess the secret_number: 15\n","too high\n","guess the secret_number: 13\n","congratulations, you guess it right\n"]}]},{"cell_type":"code","source":["#practical questions"],"metadata":{"id":"4Mgvwo_qHtPX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Q1- Write a Python program to print \"Hello, World!_\n","#Answer-\n","x = \" Hello, world!\"\n","print (x)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VPQQQgVMH4Wv","executionInfo":{"status":"ok","timestamp":1735974315169,"user_tz":-330,"elapsed":581,"user":{"displayName":"Gagan Deep","userId":"13599288974688093114"}},"outputId":"eb2fcaa9-9133-46d9-ef7e-7c0781fa68e1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":[" Hello, world!\n"]}]},{"cell_type":"code","source":["#Q2- Write a Python program that displays your name and age\n","#Answer-\n","x= \"Gagandeep singh\"\n","y= str(18)\n","print(f\"( My name is {x} and my age is {y})\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"K5Tfvif2IjlK","executionInfo":{"status":"ok","timestamp":1735975000842,"user_tz":-330,"elapsed":623,"user":{"displayName":"Gagan Deep","userId":"13599288974688093114"}},"outputId":"06632c95-5869-463a-d000-b337b7a81688"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["( My name is Gagandeep singh and my age is 18)\n"]}]},{"cell_type":"code","source":["#Q3- Write code to print all the pre-defined keywords in Python using the keyword library\n","#Answer-\n","import keyword\n","print (\"predefined keywords in python:\")\n","for kw in keyword.kwlist:\n","    print (kw)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mKDKAQZzLJOW","executionInfo":{"status":"ok","timestamp":1735975451129,"user_tz":-330,"elapsed":657,"user":{"displayName":"Gagan Deep","userId":"13599288974688093114"}},"outputId":"1f6e7733-d6d6-4d9a-b077-2a81566c93ff"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["predefined keywords in python:\n","False\n","None\n","True\n","and\n","as\n","assert\n","async\n","await\n","break\n","class\n","continue\n","def\n","del\n","elif\n","else\n","except\n","finally\n","for\n","from\n","global\n","if\n","import\n","in\n","is\n","lambda\n","nonlocal\n","not\n","or\n","pass\n","raise\n","return\n","try\n","while\n","with\n","yield\n"]}]},{"cell_type":"code","source":["#Q4- Write a program that checks if a given word is a Python keyword\n","#Answer-\n","import keyword\n","\n","def is_python_keyword(word):\n","    if keyword.iskeyword(word):\n","        print(f\"'{word}' is a Python keyword.\")\n","    else:\n","        print(f\"'{word}' is not a Python keyword.\")\n","\n","# Example usage\n","word = input(\"Enter a word to check if it's a Python keyword: \")\n","is_python_keyword(word)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IjgT8ZDdM4Jo","executionInfo":{"status":"ok","timestamp":1735976206109,"user_tz":-330,"elapsed":9818,"user":{"displayName":"Gagan Deep","userId":"13599288974688093114"}},"outputId":"179f5a1b-7ea4-436c-8723-9769e8bf46b9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter a word to check if it's a Python keyword: if\n","'if' is a Python keyword.\n"]}]},{"cell_type":"code","source":["#Q5- Create a list and tuple in python, and demonstrate how  attempting to change an element works differently for each\n","#Ans-\n","list=[1,2,3,4]\n","list[1]=7\n","print(list)\n","#in tupple\n","tuple=(1,2,3,4)\n","tuple(1)==9\n","print(tuple)\n","print(\"you can see the list is mutable where tuple is non mutable\")"],"metadata":{"id":"2dYIBiqCPuDA","colab":{"base_uri":"https://localhost:8080/","height":367},"executionInfo":{"status":"error","timestamp":1735977779834,"user_tz":-330,"elapsed":612,"user":{"displayName":"Gagan Deep","userId":"13599288974688093114"}},"outputId":"96c577ae-33b4-45f8-bf28-b652b244b453"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[1, 7, 3, 4]\n"]},{"output_type":"error","ename":"TypeError","evalue":"'tuple' object is not callable","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-34-d247ece300fe>\u001b[0m in \u001b[0;36m<cell line: 8>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;31m#in tupple\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m \u001b[0mtuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m==\u001b[0m\u001b[0;36m9\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtuple\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"you can see the list is mutable where tuple is non mutable\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: 'tuple' object is not callable"]}]},{"cell_type":"code","source":["Q6- Write a function to demonstrate the behaviour of mutable and immutable argument?\n","##Answer- lists are mutable and tuples are immutable\n","#For eg- create a list\n","list=[1, 2,3,4,5]#now we can add or replace in this because it is mutable\n","list[2]=19\n","list.append(17)\n","print(list)\n","#Tuple is immutable so we cannot change anything\n","tuple=(1, 2,3,4,5,6)\n","tuple[2]=20\n","tuple.add(65)\n","print (tuple)\n","#here we can see tuple is immutable however we can change tuple if we convert inner string or syntax to list."],"metadata":{"id":"rDrE-Jy7VvDA","colab":{"base_uri":"https://localhost:8080/","height":367},"executionInfo":{"status":"error","timestamp":1736152578524,"user_tz":-330,"elapsed":495,"user":{"displayName":"Gagan Deep","userId":"13599288974688093114"}},"outputId":"4eb43091-2d38-48c3-be29-2ab007654679"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Object `argument` not found.\n","[1, 2, 19, 4, 5, 17]\n"]},{"output_type":"error","ename":"TypeError","evalue":"'tuple' object does not support item assignment","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-9-39808a781781>\u001b[0m in \u001b[0;36m<cell line: 10>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;31m#Tuple is immutable so we cannot change anything\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m6\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 10\u001b[0;31m \u001b[0mtuple\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m20\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     11\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m65\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0mprint\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mtuple\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: 'tuple' object does not support item assignment"]}]},{"cell_type":"code","source":["#Q7- Write a function to demonstrate the behaviour of mutable and immutable argument?\n","#Answer- lists are mutable and tuple are immutable\n","###For eg- create a list\n","list=[1, 2,3,4,5]# now we can add or append\n","list[2]=27\n","list.append (40)\n","print (list)\n","#tuple is immutable and we cannot change it\n","tuple=(1, 2,3,4,5,6)\n","tuple.add(\"rey\")\n","tuple[3]=45\n","print (tuple)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":349},"id":"NAXZf2h2xQof","executionInfo":{"status":"error","timestamp":1736153273507,"user_tz":-330,"elapsed":552,"user":{"displayName":"Gagan Deep","userId":"13599288974688093114"}},"outputId":"86307468-88eb-4b92-8da6-b8c970e5dd49"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[1, 2, 27, 4, 5, 40]\n"]},{"output_type":"error","ename":"AttributeError","evalue":"'tuple' object has no attribute 'add'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-12-0977892aaa27>\u001b[0m in \u001b[0;36m<cell line: 10>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;31m#tuple is immutable and we cannot change it\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m6\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 10\u001b[0;31m \u001b[0mtuple\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"rey\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     11\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m45\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0mprint\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mtuple\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: 'tuple' object has no attribute 'add'"]}]},{"cell_type":"code","source":["#Q8- write a program to demonstrate the use of logical operators?\n","##Answer- there are 3 type of logical operators\n","#1.and\n","#2.or\n","#3.not\n","#So for eg\n","A= True\n","B= False\n","print (\"A and B:\" A and B)\n","print (\"A Or B:\" \"A Or B)\n","print (\"A not B:\" \"A not B)"],"metadata":{"id":"gX45C_1EzPb3","colab":{"base_uri":"https://localhost:8080/","height":141},"executionInfo":{"status":"error","timestamp":1736154228706,"user_tz":-330,"elapsed":504,"user":{"displayName":"Gagan Deep","userId":"13599288974688093114"}},"outputId":"dedccee3-d5c4-4649-8d1e-37ae27eeaee8"},"execution_count":null,"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"unterminated string literal (detected at line 10) (<ipython-input-15-e5547930c9cd>, line 10)","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-15-e5547930c9cd>\"\u001b[0;36m, line \u001b[0;32m10\u001b[0m\n\u001b[0;31m    print (\"A Or B:\" \"A Or B)\u001b[0m\n\u001b[0m                     ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m unterminated string literal (detected at line 10)\n"]}]},{"cell_type":"code","source":["#Q9- write a python program to convert user string to integer, float, boolean?\n","#Answer-\n","\n","#Changing string to integer\n","x= int(input())\n","print(x)\n","\n","#Changing string to float\n","y= float(input())\n","print(y)\n","\n","#Changing string to bool\n","z= bool(input ())\n","print(z)"],"metadata":{"id":"cX0LQ3OR3F8Z","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1736154838507,"user_tz":-330,"elapsed":42395,"user":{"displayName":"Gagan Deep","userId":"13599288974688093114"}},"outputId":"ed2caf8f-ac33-4670-c9ed-407e9b0efaf9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["30\n","30\n","3\n","3.0\n","4\n","True\n"]}]},{"cell_type":"code","source":["#Q10- write a code to demonstrate typecasting with list elements?\n","#Answer- firstly we have to create a list\n","list=([\"1\",\"2\",\"3\",\"ajay\", \"verma\", \"2.5\",\"19\"])\n","# Creating a list with various types of elements\n","my_list = [\"1\", \"2\", \"3\", \"ajay\", \"verma\", \"2.5\", \"19\"]\n","\n","# Converting the list elements to different types using typecasting\n","int_list = []\n","float_list = []\n","string_list = []\n","\n","for element in my_list:\n","\n","    try:\n","        int_list.append(int(element))  # Typecast to integer\n","    except ValueError:\n","        pass\n","\n","    try:\n","        float_list.append(float(element))\n","    except ValueError:\n","        pass\n","\n","\n","    if not element.isdigit() and not '.' in element:\n","        string_list.append(element)\n","\n","# Print the lists with the typecasted values\n","print(\"Original list:\", my_list)\n","print(\"List after typecasting to integers:\", int_list)\n","print(\"List after typecasting to floats:\", float_list)\n","print(\"List of non-numeric strings:\", string_list)"],"metadata":{"id":"vPm7MeI05dR2","executionInfo":{"status":"ok","timestamp":1736329471596,"user_tz":-330,"elapsed":568,"user":{"displayName":"Gagan Deep","userId":"13599288974688093114"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"ad218eb7-6804-463b-9916-17cd12c25101"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Original list: ['1', '2', '3', 'ajay', 'verma', '2.5', '19']\n","List after typecasting to integers: [1, 2, 3, 19]\n","List after typecasting to floats: [1.0, 2.0, 3.0, 2.5, 19.0]\n","List of non-numeric strings: ['ajay', 'verma']\n"]}]},{"cell_type":"code","source":["#Q11- write a program that check wheather the number is  positive, negative or zero?\n","#Answer-\n","a=float(input(\"Enter a number:\"))\n","if a>0:\n","  print (\"Positive\")\n","elif a==0:\n","  print(\"zero\")\n","else:\n","  print (\"Negative\")"],"metadata":{"id":"BCb9FiLzTbQi","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1736333168759,"user_tz":-330,"elapsed":5864,"user":{"displayName":"Gagan Deep","userId":"13599288974688093114"}},"outputId":"402e3fd1-c2ce-415d-c6a3-eac2ab75df2c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter a number:5\n","Positive\n"]}]},{"cell_type":"code","source":["#Q12- write a for loop to print the number\n","#Answer-\n","for i in range(1, 11):\n","    print(i)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZfH7LBq-jr-n","executionInfo":{"status":"ok","timestamp":1736350849126,"user_tz":-330,"elapsed":24,"user":{"displayName":"Gagan Deep","userId":"13599288974688093114"}},"outputId":"c819c0dc-1ebd-49c8-f72a-93b14f884a16"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1\n","2\n","3\n","4\n","5\n","6\n","7\n","8\n","9\n","10\n"]}]},{"cell_type":"code","source":["#Q13- write a python program to find the sum of all even numbers between 1-50?\n","#Answer-\n","\n","sum_even = sum(number for number in range(1, 50) if number % 2 == 0)\n","\n","\n","print(\"Sum of all even numbers between 1 and 50:\", sum_even)"],"metadata":{"id":"FNeVN_iOk2vh","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1736351361847,"user_tz":-330,"elapsed":627,"user":{"displayName":"Gagan Deep","userId":"13599288974688093114"}},"outputId":"8afca2a8-ef38-43f0-dc53-7fd9da556eaf"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Sum of all even numbers between 1 and 50: 600\n"]}]},{"cell_type":"code","source":["#Q14- write a program to reverse a string using a while loop?\n","#Answer-\n","def reverse_string(s):\n","    reversed_str = \"\"\n","    index = len(s) - 1\n","\n","    while index >= 0:\n","        reversed_str += s[index]\n","        index -= 1\n","\n","    return reversed_str\n","\n","\n","input_str = \"hello\"\n","print(reverse_string(input_str))"],"metadata":{"id":"BDEJGBBUm09_","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1736351583245,"user_tz":-330,"elapsed":475,"user":{"displayName":"Gagan Deep","userId":"13599288974688093114"}},"outputId":"82b02b0e-e420-480a-d283-012ba7d86c59"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["olleh\n"]}]},{"cell_type":"code","source":["#Q15- Write a python program to calculate the factorial of a number provided by user using a while loop?\n","#Answer-\n","\n","number = int(input(\"Enter a number: \"))\n","\n","factorial = 1\n","\n","\n","if number < 0:\n","    print(\"Factorial is not defined for negative numbers.\")\n","else:\n","\n","    while number > 0:\n","        factorial *= number\n","        number -= 1\n","\n","\n","    print(\"The factorial is:\", factorial)"],"metadata":{"id":"wvEvhl7wnxGc","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1736351898066,"user_tz":-330,"elapsed":7724,"user":{"displayName":"Gagan Deep","userId":"13599288974688093114"}},"outputId":"6828a394-a454-4fab-e2a3-255be6e4e65e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter a number: 4\n","The factorial is: 24\n"]}]}]}